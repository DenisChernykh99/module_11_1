import pandas as pd  # Импортируем библиотеку Pandas.

'''Pandas — главная библиотека в Python для работы с данными.
Её активно используют аналитики данных и дата-сайентисты.
Основные задачи:
- Аналитика данных: продуктовая, маркетинговая и другая.
- Data science и работа с большими данными.
- Статистика.
'''

# Создаём словарь с нужной информацией о городах.
city = {'Город': ['Москва', 'Санкт-Петербург', 'Новосибирск', 'Екатеринбург'],
        'Год основания': [1147, 1703, 1893, 1723],
        'Население': [11.9, 4.9, 1.5, 1.4]}

# Превращаем словарь в DataFrame, используя стандартный метод библиотеки.
df = pd.DataFrame(city)

# Фильтруем наш датафрейм по населению
# от меньшего к большему(False - от большего к меньшему)
df1 = df.sort_values('Население', ascending=True)

# добавляем новые данные в датафрейм

# Создаем словарь с необходимой информацией
new_city = {'Город': 'Самара', 'Год основания': 1586, 'Население': 1.1}

# Конвертируем словарь в датафрейм
df_new_city = pd.DataFrame([new_city])

# объединяем старый и новый дата фрейм
new_df = pd.concat([df_new_city, df1])
print(df)
print(df1)
print(new_df)

from PIL import Image

'''Pillow является важным инструментом для работы с изображениями.
Она предоставляет функции обработки, аналогичные тем, которые можно найти в программном обеспечении Photoshop.
Pillow часто является предпочтительным вариантом для задач обработки изображений высокого уровня,
которые не требуют более продвинутых навыков обработки.'''

# Объявляем изображение
filename = "buildings.jpg"

# используем with для создания менеджера контекста, чтобы не забыть закрыть файл
with Image.open(filename) as img:
    # открываем изображение
    img.show()

    # выводим размер изображения
    print(img.size)

    # обрезаем изображение по отступу от четырех краев изображения
    cropped_img = img.crop((300, 150, 700, 1000))

    # проверяем размер изображения
    print(cropped_img.size)

    # открываем обрезанное изображение
    cropped_img.show()

    # меняем разрешение обрезанного изображения, делая его в 4 раза меньше
    low_res_img = cropped_img.resize(
        (cropped_img.width // 4, cropped_img.height // 4)
    )

    # открываем финальное изображение
    low_res_img.show()

    # сохраняем оба варианта измененных изображений в форматах jpeg и png
    cropped_img.save("cropped_image.jpg")
    low_res_img.save("low_resolution_cropped_image.png")

import requests

# Создаём переменную, в которую сохраним код состояния запрашиваемой страницы.
response = requests.get('https://api.github.com')

# Выводим код состояния.
print(response)

# Выводим содержимое странницы в виде байтов
print(response.content)

# Выводим содержимое странницы в текстовом виде
print(response.text)

# В обоих случаях мы получаем классический JSON-текст,
# который можно использовать как словарь, получая доступ к нужным значениям по известному ключу.

# Проверяем аутентификацию на GitHub

# Импортируем метод getpass из одноимённой библиотеки для ввода пароля доступа.
from getpass import getpass

requests.get('https://api.github.com/user', auth=('DenisChernykh99', getpass()))
